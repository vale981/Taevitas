#ifndef CAMERAMANAGER_H
#define CAMERAMANAGER_H


/* 
   This Class is an abstraction over the FlyCapture2 API for handeling the connection to the camera and 
   hiding the internals from the GUI code, to make reusability easier, although FlyCapture code is needed   outside.
*/

// TODO: Exclude inline Implementation

#include <QObject>
#include "FlyCapture2.h"

class CameraManager : public QObject
{
	Q_OBJECT
	
public:
	explicit CameraManager(QObject *parent = 0);
	~CameraManager();

	// Pointer to the last image captured by the camera //TODO maybe obsolete
	FlyCapture2::Image* lastImage;

	// Starts capturing images. When an image has been captured, the signal frameCaptured is emited.
	// returns an Error if starting the Capture goes wrong
	FlyCapture2::Error StartCapture();

	//TODO remove, if not needed
	FlyCapture2::Camera* getCamera() {
		return &camera;
	};

	bool isConnected() {
		return camera.IsConnected();
	}

	// Get the number of connected cameras.
	unsigned int numCameras() {
		bus_mgr.GetNumOfCameras(&num_cameras);
		return num_cameras;
	};

	FlyCapture2::Error selectCamera(unsigned int);
	
private:
	FlyCapture2::Camera camera;
	
	FlyCapture2::BusManager bus_mgr;
	unsigned int num_cameras;
	
	// GUID of the camera, which is currently being used
	FlyCapture2::PGRGuid camera_guid;
			
private slots:
	
signals:
	void frameCaptured(FlyCapture2::Image*);

};

#endif // CAMERAMANAGER_H
